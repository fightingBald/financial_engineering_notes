{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "A_djuWRzMXkq"
   },
   "source": [
    "MODULE 3 | LESSON 1\n",
    "\n",
    "\n",
    "---\n",
    "\n",
    "# **Portfolio Returns and Variance**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "aSW9-996Miww"
   },
   "source": [
    "|  |  |\n",
    "|:---|:---|\n",
    "|**Reading Time** | 2h  |\n",
    "|**Prior Knowledge** | python, returns, variance, diversification  |\n",
    "|**Keywords** | returns, logarithm, percent, matrix notation, distribution, annualize, geometric mean, arithmetic mean, portfolio variance, correlation, weights|\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "t6JWZbCYFhmI"
   },
   "source": [
    "* 在这节课里，我们会学几个重要的理财技能：\n",
    "* 算投资的回报（有两种常见的回报计算方式：百分比回报和对数回报），它们各自有什么特点，什么时候该用哪种。\n",
    "* 回报换算成年化回报（比如你投资3个月赚了3%，那全年大概能赚多少？）\n",
    "* 我们还会学怎么计算一个投资组合的“波动风险”（也就是组合的方差）。我们会看看，一个组合的整体风险，怎么受到每个资产的风险、它们在组合里的占比、以及它们之间的关联（相关性）影响。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4tsZsezGth8R"
   },
   "source": [
    "## **1. Portfolio Returns 投资组合（portfolio）收益是怎么计算的**\n",
    "\n",
    "🔹 什么是投资组合收益？\n",
    "\n",
    "假设你买了几种资产，比如苹果、特斯拉和微软的股票。每种股票每天都有涨跌，也就是有个“收益率”（return）。你给每只股票分配一个“权重”（weight），比如你把总资金的 50% 投在苹果，30% 投在特斯拉，20% 投在微软。\n",
    "\n",
    "投资组合的总收益率，就是这些单独收益率的加权平均：\n",
    "$$\n",
    "r_p = w_1 \\cdot r_1 + w_2 \\cdot r_2 + w_3 \\cdot r_3\n",
    "$$\n",
    "$$\n",
    "r_{p} = \\sum_{1}^{n} w_{i} \\cdot r_{i}\n",
    "$$\n",
    "where\n",
    "* $r_{p}$: portfolio returns\n",
    "* $r_{i}$: asset $i$ returns\n",
    "* $w_{i}$: the weight of asset $i$\n",
    "\n",
    "We should have an additional constraint in mind:\n",
    "$$\n",
    "\\sum_{1}^{n} w_{i} = 1\n",
    "$$\n",
    "\n",
    "and for the purposes of this lesson, we will also assume that shorting is not allowed:\n",
    "$$\n",
    "w_{i} > 0\n",
    "$$\n",
    "\n",
    "Essentially, the return of the portfolio $r_{p}$ is a linear combination of the returns of each asset. By construction, we have that $r_{p} \\in \\text{span}(r_{i})$ for every combination of the weights. That means that the assets that an investor chooses are the basis (in a Linear Algebra context) of the portfolio.\n",
    "\n",
    "Let's now write the portfolio returns in the format we will be using for the rest of the lesson and make the notation clear:\n",
    "\n",
    "$$\n",
    "r_{p} = \\mathbf{r} \\cdot \\mathbf{w}\n",
    "$$\n",
    "\n",
    "with\n",
    "$$ \\mathbf{r} = \\begin{bmatrix} r_1 & r_2 & \\dots & r_n \\end{bmatrix} \\text{ , } \\mathbf{w} = \\begin{bmatrix} w_1 \\\\ w_2 \\\\ \\vdots \\\\ w_n \\end{bmatrix}$$\n",
    "\n",
    "and each $r_{i}$ is a vector that represents the returns of each asset across time $t$:\n",
    "$$\n",
    "r_{i} = \\begin{bmatrix} r^i_{t_{1}} \\\\ r^i_{t_{2}} \\\\ \\vdots \\\\ r^i_{t_{m}} \\end{bmatrix}\n",
    "$$\n",
    "\n",
    "\n",
    "\n",
    "Using $1$ as the sum of all weights has an intuitive explanation: we construct the portfolio by using a percentage of each asset (the weights) until we use the entire amount ($1$ means $100\\%$). What does it mean if we break that constraint?\n",
    "\n",
    "\n",
    "**Exercise 1:**\n",
    "\n",
    "Use your favorite finance textbook and online resources in researching the constraint $\\sum_{1}^{n} w_{i} = 1$. What would it mean for a portfolio if $\\sum_{1}^{n} w_{i} = 2$ ? Answer the same question but now for $\\sum_{1}^{n} w_{i} = 0$. Initiate a discussion in the forum explaining your understanding.\n",
    "\n",
    "\n",
    "\n",
    "你要用一个常见的金融数据网站（比如 Yahoo Finance）来下载一些真实的资产数据，然后计算这些资产的日收益率。下面是每一行代码在干嘛的通俗解释："
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "executionInfo": {
     "elapsed": 3232,
     "status": "ok",
     "timestamp": 1732130380473,
     "user": {
      "displayName": "Christos Koutkos",
      "userId": "05788829401179389824"
     },
     "user_tz": -120
    },
    "id": "encGrn7iFG7_",
    "tags": [],
    "ExecuteTime": {
     "end_time": "2025-06-28T14:54:06.592698Z",
     "start_time": "2025-06-28T14:54:06.357689Z"
    }
   },
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import yfinance as yf\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set()"
   ],
   "outputs": [],
   "execution_count": 1
  },
  {
   "cell_type": "code",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 255
    },
    "executionInfo": {
     "elapsed": 14,
     "status": "ok",
     "timestamp": 1732130380473,
     "user": {
      "displayName": "Christos Koutkos",
      "userId": "05788829401179389824"
     },
     "user_tz": -120
    },
    "id": "CIq0akzMzX81",
    "outputId": "026f4a32-d31f-4407-fb36-768a5b77e372",
    "ExecuteTime": {
     "end_time": "2025-06-28T14:56:35.119470Z",
     "start_time": "2025-06-28T14:56:35.040271Z"
    }
   },
   "source": [
    "assets = ['MSFT', 'AAPL', 'AMZN', 'TSLA', 'GOOGL'] # Assets for portfolio\n",
    "w = np.array([0.1, 0.2, 0.1, 0.4, 0.2]) #  # 每只股票在你投资组合里的占比（总和为 1）\n",
    "\n",
    "asset_prices = yf.download(assets, start='2018-01-01', end='2023-01-01', auto_adjust = False)['Adj Close']\n",
    "# 用 yfinance 从 2018 年到 2023 年拉这五家公司每天的收盘价格数据。\n",
    "\n",
    "asset_prices.index = pd.to_datetime(asset_prices.index) # Setting index as datetime object\n",
    "\n",
    "r = asset_prices.pct_change().dropna() # 这里 .pct_change() 是计算每天的百分比涨跌幅（收益率）。比如从100涨到105就是+5%。\n",
    "\n",
    "\n",
    "r.head() # Each column is r_{i}"
   ],
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  5 of 5 completed\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Ticker          AAPL      AMZN     GOOGL      MSFT      TSLA\n",
       "Date                                                        \n",
       "2018-01-03 -0.000174  0.012775  0.017061  0.004654 -0.010233\n",
       "2018-01-04  0.004645  0.004476  0.003884  0.008801 -0.008290\n",
       "2018-01-05  0.011386  0.016163  0.013260  0.012398  0.006230\n",
       "2018-01-08 -0.003714  0.014425  0.003531  0.001020  0.062638\n",
       "2018-01-09 -0.000114  0.004676 -0.001274 -0.000679 -0.008085"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Ticker</th>\n",
       "      <th>AAPL</th>\n",
       "      <th>AMZN</th>\n",
       "      <th>GOOGL</th>\n",
       "      <th>MSFT</th>\n",
       "      <th>TSLA</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-03</th>\n",
       "      <td>-0.000174</td>\n",
       "      <td>0.012775</td>\n",
       "      <td>0.017061</td>\n",
       "      <td>0.004654</td>\n",
       "      <td>-0.010233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-04</th>\n",
       "      <td>0.004645</td>\n",
       "      <td>0.004476</td>\n",
       "      <td>0.003884</td>\n",
       "      <td>0.008801</td>\n",
       "      <td>-0.008290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-05</th>\n",
       "      <td>0.011386</td>\n",
       "      <td>0.016163</td>\n",
       "      <td>0.013260</td>\n",
       "      <td>0.012398</td>\n",
       "      <td>0.006230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-08</th>\n",
       "      <td>-0.003714</td>\n",
       "      <td>0.014425</td>\n",
       "      <td>0.003531</td>\n",
       "      <td>0.001020</td>\n",
       "      <td>0.062638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-09</th>\n",
       "      <td>-0.000114</td>\n",
       "      <td>0.004676</td>\n",
       "      <td>-0.001274</td>\n",
       "      <td>-0.000679</td>\n",
       "      <td>-0.008085</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 4
  },
  {
   "cell_type": "code",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 272
    },
    "executionInfo": {
     "elapsed": 11,
     "status": "ok",
     "timestamp": 1732130380474,
     "user": {
      "displayName": "Christos Koutkos",
      "userId": "05788829401179389824"
     },
     "user_tz": -120
    },
    "id": "9V43H4sB0jKV",
    "outputId": "97c6bb37-f828-4f9b-a562-a203e49cf662",
    "ExecuteTime": {
     "end_time": "2025-06-28T14:56:46.128767Z",
     "start_time": "2025-06-28T14:56:46.122408Z"
    }
   },
   "source": [
    "#w = np.array([0.1, 0.2, 0.1, 0.4, 0.2]) #  # 每只股票在你投资组合里的占比（总和为 1）\n",
    "r_port = r @ w # Creating portfolio returns\n",
    "r_port.name = 'portfolio_returns'\n",
    "r_port.head()"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "2018-01-03    0.004059\n",
       "2018-01-04    0.003611\n",
       "2018-01-05    0.011902\n",
       "2018-01-08    0.015802\n",
       "2018-01-09   -0.001093\n",
       "Name: portfolio_returns, dtype: float64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 5
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## **2 Types of Returns**\n",
    "\n",
    "\n",
    "\n",
    "### **2.1 Percentage Returns**\n",
    "\n",
    "\n",
    "\n",
    "2 类收益率\n",
    "\n",
    "我们在上一节聊的是 每日组合的百分比变化，但实际金融中常用两种收益率：百分比（简单）收益和对数收益。\n",
    "\n",
    "2.1 百分比收益（Arithmetic/Percent Return）\n",
    "\n",
    "$$\n",
    "r_t = \\frac{p_t - p_{t-1}}{p_{t-1}}\n",
    "$$\n",
    "\t•\t啥意思？ 就是价格涨跌除以之前的价格，最直观。\n",
    "\t•\t优点？ 易理解，也方便组合计算（加权平均）。\n",
    "\t•\t缺点？\n",
    "\t•\t不能累加。 如果第一月涨 20%，第二月跌 18%，总收益 ≠ 20% – 18% = 2%。\n",
    "实际是：100→120（涨20%），再跌18%→约98.4，不是102。\n",
    "\t•\t不对称。 跌幅最多是 –100%（价值归零），但涨幅没有上限。\n",
    "\n",
    "**Exercise 2:**\n",
    "\n",
    "Create a custom function in Python that given a price array (for example `asset_prices['MSFT']`), will return the array of the arithmetic returns. You are not allowed to use any existing Python functions. Cross-check the results with the ones produced by using the `pct_change` pandas function."
   ]
  },
  {
   "metadata": {},
   "cell_type": "code",
   "outputs": [],
   "execution_count": null,
   "source": ""
  },
  {
   "metadata": {
    "id": "mB-08puS-5QJ"
   },
   "cell_type": "markdown",
   "source": [
    "\n",
    "### **2.2 Logarithmic Returns**\n",
    "⸻\n",
    "\n",
    "🧠 为什么对数收益率可以直接加起来？\n",
    "\n",
    "对数收益率的“加性”特性来自于对数函数的一个基本性质：\n",
    "\n",
    "\\log(ab) = \\log(a) + \\log(b)\n",
    "\n",
    "好，现在你拿出你的基金净值或者股票价格，我们来模拟个例子。\n",
    "\n",
    "⸻\n",
    "\n",
    "🧮 假设：\n",
    "\n",
    "某股票每天的收益率如下：\n",
    "\t•\t第一天从 100 涨到 105 → 收益率 = \\frac{105}{100} = 1.05\n",
    "\t•\t第二天从 105 涨到 110 → 收益率 = \\frac{110}{105} = 1.0476\n",
    "\n",
    "⸻\n",
    "\n",
    "✅ 普通收益率总收益率：\n",
    "\n",
    "\\frac{110}{100} = 1.10 = 10\\%\n",
    "\n",
    "⸻\n",
    "\n",
    "✅ 对数收益率：\n",
    "\n",
    "我们用自然对数（ln）来表示每天的对数收益率：\n",
    "\t•\t第一天： \\ln(1.05)\n",
    "\t•\t第二天： \\ln(1.0476)\n",
    "\n",
    "加起来：\n",
    "\n",
    "\\ln(1.05) + \\ln(1.0476) = \\ln(1.05 \\times 1.0476) = \\ln(1.10)\n",
    "\n",
    "这正好是从 100 涨到 110 的对数收益率。\n",
    "\n",
    "⸻\n",
    "\n",
    "💡 结论：\n",
    "\n",
    "对数收益率之所以可以“加起来”，是因为它把“连乘”（每天收益相乘）转换成“连加”。这就像把烦人的乘法考试交给了加法的小学生，完美避坑。\n",
    "\n",
    "⸻\n",
    "\n",
    "如果这还不够浪漫，你可以想象对数收益率是金融界的小精灵，擅长悄悄地把复杂的乘法变成简单的加法，方便你撸代码算总收益。多贴心。\n",
    "\n",
    "**Exercise 3:**\n",
    "\n",
    "编写一个Python 函数，输入一个价格数组（比如 asset_prices['MSFT']），输出对应的对数收益率数组（logarithmic returns）。"
   ]
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-06-28T16:21:17.400677Z",
     "start_time": "2025-06-28T16:21:17.396673Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "def compute_log_returns(price_series):\n",
    "    \"\"\"\n",
    "    Compute logarithmic returns from a pandas Series of prices.\n",
    "\n",
    "    Parameters:\n",
    "        price_series (pd.Series): A time series of asset prices.\n",
    "\n",
    "    Returns:\n",
    "        pd.Series: Logarithmic returns of the price series.\n",
    "    \"\"\"\n",
    "    return np.log(price_series / price_series.shift(1)).dropna()\n",
    "\n",
    "# Assume asset_prices is a DataFrame containing MSFT prices\n",
    "log_returns = compute_log_returns(asset_prices['MSFT'])\n",
    "print(log_returns.head())"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Date\n",
      "2018-01-03    0.004643\n",
      "2018-01-04    0.008763\n",
      "2018-01-05    0.012322\n",
      "2018-01-08    0.001020\n",
      "2018-01-09   -0.000679\n",
      "Name: MSFT, dtype: float64\n"
     ]
    }
   ],
   "execution_count": 7
  },
  {
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 566,
     "status": "ok",
     "timestamp": 1732130381030,
     "user": {
      "displayName": "Christos Koutkos",
      "userId": "05788829401179389824"
     },
     "user_tz": -120
    },
    "id": "OyCypFeyVBgi",
    "outputId": "e07a6621-5761-4cdb-effe-43f36ea80204",
    "ExecuteTime": {
     "end_time": "2025-06-28T16:19:03.161471Z",
     "start_time": "2025-06-28T16:19:03.154546Z"
    }
   },
   "cell_type": "code",
   "source": "print(\"The 25th quantile is: \", r['MSFT'].quantile(0.25),\"\\nThe 75th quantile is: \", r['MSFT'].quantile(0.75))",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The 25th quantile is:  -0.008331561698708356 \n",
      "The 75th quantile is:  0.010937994249876237\n"
     ]
    }
   ],
   "execution_count": 6
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XLfXADsEWeCL"
   },
   "source": [
    "\n",
    "\n",
    "上面的结果说明了一个现象：很多时候，每日的收益率大概就在 1% 左右。然后，对于“对数收益率”和“百分比收益率”这两个概念，它们之间的关系是这样的：\n",
    "\n",
    "$$\n",
    "r_{\\text{log}} = \\ln\\left(\\frac{p_t}{p_{t-1}}\\right) =\n",
    "\\ln\\left(\\frac{p_t - p_{t-1} + p_{t-1}}{p_{t-1}}\\right) =\n",
    "\\ln(1 + r_{\\text{pct}})\n",
    "$$\n",
    "\n",
    "意思是：“对数收益率”其实就是 “百分比收益率 + 1” 之后取对数。数学上，没毛病。\n",
    "\n",
    "接下来用泰勒展开（这玩意儿是数学里的一个套路，拿来近似复杂函数）把这个公式展开，就变成这样了：\n",
    "\n",
    "$$\n",
    "r_{\\text{log}} = \\ln(1 + r_{\\text{pct}}) = r_{\\text{pct}} - \\frac{r_{\\text{pct}}^2}{2} + \\frac{r_{\\text{pct}}^3}{3} - \\frac{r_{\\text{pct}}^4}{4} + \\dots\n",
    "$$\n",
    "\n",
    "既然我们看到每日收益都很小（小于 0.01），那么后面那些高次幂（立方、四次方……）的项基本可以忽略不计。于是就简化为：\n",
    "\n",
    "$$\n",
    "r_{\\text{log}} = r_{\\text{pct}} - \\frac{r_{\\text{pct}}^2}{2} + O(R^3)\n",
    "$$\n",
    "\n",
    "这里的 O(R^3) 表示“还有一些更高阶的项，但它们都小得可以忽略”。\n",
    "\n",
    "如果我们对上面这个公式的两边都取期望值（就是“平均一下”），再动点代数手术，就会得到这个结论：\n",
    "\n",
    "$$\n",
    "\\mathbb{E}(r_{\\text{log}}) \\approx \\mathbb{E}(r_{\\text{pct}}) - \\frac{\\sigma^2}{2}\n",
    "$$\n",
    "\n",
    "其中 \\sigma^2 是百分比收益率的方差，也就是衡量“波动性”的指标。\n",
    "\n",
    "这个公式告诉我们两个非常重要的事情：\n",
    "\t1.\t当市场波动小的时候（比如你的股票不怎么蹦跶），对数收益率和百分比收益率几乎一样。（这是 Ruppert 和 Matteson 这俩学者说的，不是我瞎编的）\n",
    "\t2.\t如果你把数据按更长时间来看（比如从按天看变成按月看），那么收益的绝对值就会变大，波动也会变大，对数收益和百分比收益的差距也会拉大。\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 419
    },
    "executionInfo": {
     "elapsed": 2138,
     "status": "ok",
     "timestamp": 1732130383165,
     "user": {
      "displayName": "Christos Koutkos",
      "userId": "05788829401179389824"
     },
     "user_tz": -120
    },
    "id": "s70hkb5qNfA6",
    "outputId": "bf6bccf4-6376-4154-b9c9-125d7528b037",
    "ExecuteTime": {
     "end_time": "2025-06-28T16:55:58.583795Z",
     "start_time": "2025-06-28T16:55:58.453181Z"
    }
   },
   "source": [
    "# 计算微软（MSFT）每日的百分比收益率，即 (今天的价格 - 昨天的价格) / 昨天的价格\n",
    "pct_returns_msft = asset_prices['MSFT'].pct_change().dropna()\n",
    "\n",
    "# 计算每日对数收益率，即 ln(今天的价格 / 昨天的价格)\n",
    "log_returns_msft = np.log(asset_prices['MSFT'] / asset_prices['MSFT'].shift(1)).dropna()\n",
    "\n",
    "# 计算15日滑动平均的百分比收益率，用来平滑数据看趋势\n",
    "pct_change_msft_roll_mean = pct_returns_msft.rolling(15).mean()\n",
    "\n",
    "# 计算15日滑动平均的对数收益率\n",
    "log_returns_msft_roll_mean = log_returns_msft.rolling(15).mean()\n",
    "\n",
    "# 创建图像和坐标轴，设置图的大小\n",
    "fig, ax = plt.subplots(figsize=(12,4))\n",
    "\n",
    "# 设置主标题\n",
    "ax.set_title('Difference between pct and log returns vs Price of MSFT')\n",
    "\n",
    "# 画出微软的股价曲线，设置透明度方便叠加其他图线\n",
    "ax.plot(asset_prices['MSFT'], label='MSFT Price', alpha=0.7)\n",
    "\n",
    "# 设置左边y轴的标签为股价\n",
    "ax.set_ylabel('Price')\n",
    "\n",
    "# 设置x轴的标签为时间\n",
    "ax.set_xlabel('Date')\n",
    "\n",
    "# 显示图例（说明线条含义）\n",
    "ax.legend()\n",
    "\n",
    "# 创建一个右侧y轴，用来显示收益率的差异\n",
    "ax2 = ax.twinx()\n",
    "\n",
    "# 画出百分比收益率和对数收益率的滑动平均差值，颜色设置为红色\n",
    "ax2.plot((pct_change_msft_roll_mean - log_returns_msft_roll_mean),\n",
    "         color='red', alpha=0.5, label='Difference between pct and log returns')\n",
    "\n",
    "# 设置右侧y轴的标签为差异\n",
    "ax2.set_ylabel('Difference')\n",
    "\n",
    "# 设置右侧图例的位置\n",
    "ax2.legend(loc=(0.01, 0.89))\n",
    "\n",
    "# 显示图像\n",
    "plt.show()"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 10
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Figure 1 illustrates the difference between the pct and log returns. During low vol periods, both returns are very close, whereas during the March 2020 market crash, this difference becomes pronounced.\n",
    "\n",
    "**Exercise 4:**\n",
    "\n",
    "MSFT is a low-volatility stock. Recreate Figure 1 but now use TSLA in order to illustrate clearly in which periods the two returns diverge."
   ]
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-06-28T17:00:28.005174Z",
     "start_time": "2025-06-28T17:00:27.818049Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 计算微软（MSFT）每日的百分比收益率，即 (今天的价格 - 昨天的价格) / 昨天的价格\n",
    "pct_returns_msft = asset_prices['TSLA'].pct_change().dropna()\n",
    "\n",
    "# 计算每日对数收益率，即 ln(今天的价格 / 昨天的价格)\n",
    "log_returns_msft = np.log(asset_prices['TSLA'] / asset_prices['TSLA'].shift(1)).dropna()\n",
    "\n",
    "# 计算15日滑动平均的百分比收益率，用来平滑数据看趋势\n",
    "pct_change_msft_roll_mean = pct_returns_msft.rolling(15).mean()\n",
    "\n",
    "# 计算15日滑动平均的对数收益率\n",
    "log_returns_msft_roll_mean = log_returns_msft.rolling(15).mean()\n",
    "\n",
    "# 创建图像和坐标轴，设置图的大小\n",
    "fig, ax = plt.subplots(figsize=(12,4))\n",
    "\n",
    "# 设置主标题\n",
    "ax.set_title('Difference between pct and log returns vs Price of TSLA')\n",
    "\n",
    "# 画出微软的股价曲线，设置透明度方便叠加其他图线\n",
    "ax.plot(asset_prices['TSLA'], label='TSLA Price', alpha=0.7)\n",
    "\n",
    "# 设置左边y轴的标签为股价\n",
    "ax.set_ylabel('Price')\n",
    "\n",
    "# 设置x轴的标签为时间\n",
    "ax.set_xlabel('Date')\n",
    "\n",
    "# 显示图例（说明线条含义）\n",
    "ax.legend()\n",
    "\n",
    "# 创建一个右侧y轴，用来显示收益率的差异\n",
    "ax2 = ax.twinx()\n",
    "\n",
    "# 画出百分比收益率和对数收益率的滑动平均差值，颜色设置为红色\n",
    "ax2.plot((pct_change_msft_roll_mean - log_returns_msft_roll_mean),\n",
    "         color='red', alpha=0.5, label='Difference between pct and log returns')\n",
    "\n",
    "# 设置右侧y轴的标签为差异\n",
    "ax2.set_ylabel('Difference')\n",
    "\n",
    "# 设置右侧图例的位置\n",
    "ax2.legend(loc=(0.01, 0.89))\n",
    "\n",
    "# 显示图像\n",
    "plt.show()"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 13
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "\n",
    "❓ Exercise 5: 为什么用算术平均的 log return 不能直接得出组合收益率？\n",
    "\n",
    "翻译成人话：\n",
    "\n",
    "你可能以为：\n",
    "“组合的 log 收益率 = 各资产的 log 收益 × 各自权重，然后加起来”，对吧？\n",
    "\n",
    "错！这跟现实组合的增长方式不匹配。组合实际是资产“价格的加权和”，不是 log return 的加权和。log return 的累积性适用于乘法结构，而组合价格是加法合成的，所以平均 log return 不会帮你还原出组合真实的增长。\n",
    "\n",
    "数学不骗你，你骗你自己。\n"
   ]
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "💼 Exercise 6: 计算组合的 log 收益率，并说明 log return 有啥用\n",
    "\n",
    "你要做的：\n",
    "\t1.\t给定一个 asset_weights（比如字典 {'AAPL': 0.4, 'MSFT': 0.6}），然后：\n",
    "\t2.\t每天算组合总价值 = 每只股票价格 × 对应权重，加起来。\n",
    "\t3.\t然后用 np.log(portfolio_value / portfolio_value.shift(1)) 算 log return。\n",
    "\n",
    "为什么要用 log return？\n",
    "\t•\t可以把多个 log return 加起来当作“总收益”，很方便做时间维度的累积。\n",
    "\t•\t在做组合优化、风险模型、GARCH 之类的数学黑魔法时，log return 更合适。\n",
    "\t•\t用来训练模型也更稳定（不像百分比 return 那样经常发疯）。"
   ]
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-06-28T17:29:20.881361Z",
     "start_time": "2025-06-28T17:29:20.875610Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 假设你已经有这个字典\n",
    "weights = {'AAPL': 0.4, 'MSFT': 0.3, 'TSLA': 0.3}\n",
    "\n",
    "# 把权重转成 Series，方便跟 DataFrame 做矩阵乘法\n",
    "weight_series = pd.Series(weights)\n",
    "\n",
    "# 取出你要的资产列\n",
    "selected_assets = asset_prices[weights.keys()]\n",
    "\n",
    "# 计算每日组合价值（就是每行 * 权重，再加总）\n",
    "portfolio_value = selected_assets.dot(weight_series)\n",
    "portfolio_value\n",
    "\n",
    "# 对数收益率：ln(Pt / Pt-1)\n",
    "portfolio_log_returns = np.log(portfolio_value / portfolio_value.shift(1)).dropna()\n",
    "portfolio_log_returns"
   ],
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "2018-01-03    0.000913\n",
       "2018-01-04    0.005005\n",
       "2018-01-05    0.011151\n",
       "2018-01-08    0.007612\n",
       "2018-01-09   -0.001534\n",
       "                ...   \n",
       "2022-12-23   -0.004058\n",
       "2022-12-27   -0.034884\n",
       "2022-12-28   -0.007882\n",
       "2022-12-29    0.038882\n",
       "2022-12-30    0.001163\n",
       "Length: 1258, dtype: float64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 18
  },
  {
   "metadata": {
    "id": "7Nmc1sRTc0c8"
   },
   "cell_type": "markdown",
   "source": [
    "\n",
    "**Exercise 7:**\n",
    "\n",
    "Using the provided `asset_prices` DataFrame, calculate the cumulative return of each asset over the entire period using three different methods:\n",
    "\n",
    "1. By using the daily percent returns array of each asset (hint: you will need to use the `prod` function).\n",
    "2. By using the daily log returns.\n",
    "3. By using the asset prices array."
   ]
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-06-28T17:33:16.783192Z",
     "start_time": "2025-06-28T17:33:16.774915Z"
    }
   },
   "cell_type": "code",
   "source": [
    "#👉 解释：每天收益率加1再连乘，就像利滚利一样，最后减1得到总收益。\n",
    "#计算每日百分比收益率\n",
    "pct_returns = asset_prices.pct_change().dropna()\n",
    "# 计算每个资产的累计收益\n",
    "cumulative_return_pct = (1 + pct_returns).prod() - 1\n",
    "cumulative_return_pct\n",
    "\n",
    "#方法2：用对数收益\n",
    "log_returns = np.log(asset_prices / asset_prices.shift(1)).dropna()\n",
    "cumulative_return_log = np.exp(log_returns.sum()) - 1\n",
    "\n",
    "#方法3：直接用价格 👉 解释：最后一个价格 / 第一个价格，减去1，得到的是总涨幅。\n",
    "cumulative_return_price = asset_prices.iloc[-1] / asset_prices.iloc[0] - 1\n",
    "\n",
    "cumulative_df = pd.DataFrame({\n",
    "    'From pct return': cumulative_return_pct,\n",
    "    'From log return': cumulative_return_log,\n",
    "    'From price': cumulative_return_price\n",
    "})\n",
    "\n",
    "print(cumulative_df)"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        From pct return  From log return  From price\n",
      "Ticker                                              \n",
      "AAPL           2.172855         2.172855    2.172855\n",
      "AMZN           0.412940         0.412940    0.412940\n",
      "GOOGL          0.644226         0.644226    0.644226\n",
      "MSFT           1.962922         1.962922    1.962922\n",
      "TSLA           4.764515         4.764515    4.764515\n"
     ]
    }
   ],
   "execution_count": 22
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "\n",
    "⸻\n",
    "\n",
    "3. 几何平均数 vs 算术平均数\n",
    "\n",
    "我们来看一个简单但扎心的例子，解释什么时候该用算术平均，什么时候该用几何平均，尤其在涉及复利增长时。\n",
    "\n",
    "⸻\n",
    "\n",
    "3.1 几何平均数的例子\n",
    "\n",
    "假设你在时间点 t_0 拿着 100 块：\n",
    "\t•\t从 t_0 到 t_1 收益为 +20%\n",
    "\t•\t从 t_1 到 t_2 收益为 -18%\n",
    "\n",
    "我们先来看常规的“平均收益”——算术平均数：\n",
    "\n",
    "⸻\n",
    "\n",
    "✏️ 算术平均数\n",
    "\n",
    "$$\n",
    "r_{\\text{mean}} = \\frac{0.2 - 0.18}{2} = 0.01\n",
    "$$\n",
    "\n",
    "也就是说平均每期赚 1%。那我们模拟一下结果：\n",
    "\n",
    "第一期赚：\n",
    "\n",
    "$$\n",
    "100 \\cdot 0.01 = 1 \\text{ 单位}\n",
    "$$\n",
    "\n",
    "加到本金上：\n",
    "\n",
    "$$\n",
    "100 + 1 = 101 \\text{ 单位}\n",
    "$$\n",
    "\n",
    "第二期又赚：\n",
    "\n",
    "$$\n",
    "101 \\cdot 0.01 = 1.01 \\text{ 单位}\n",
    "$$\n",
    "\n",
    "最终结果：\n",
    "\n",
    "$$\n",
    "100 + 1 + 1.01 = 102.01 \\text{ 单位}\n",
    "$$\n",
    "\n",
    "你以为你变富了？等等，我们看看真实情况。\n",
    "\n",
    "⸻\n",
    "\n",
    "🔍 实际收益（按真实收益率计算）\n",
    "\n",
    "第一期 +20%：\n",
    "\n",
    "$$\n",
    "100 \\cdot 0.2 = 20 \\text{ 单位收益}\n",
    "$$\n",
    "\n",
    "$$\n",
    "100 + 20 = 120 \\text{ 单位}\n",
    "$$\n",
    "\n",
    "第二期 -18%：\n",
    "\n",
    "$$\n",
    "120 \\cdot 0.18 = 21.6 \\text{ 单位损失}\n",
    "$$\n",
    "\n",
    "$$\n",
    "120 - 21.6 = 98.4 \\text{ 单位}\n",
    "$$\n",
    "\n",
    "你不但没赚，还亏了 1.6 单位。为啥？\n",
    "\n",
    "⸻\n",
    "\n",
    "✅ 正确方法：几何平均收益\n",
    "\n",
    "我们用这个公式：\n",
    "\n",
    "$$\n",
    "r_{\\text{GeomMean}} = \\left(\\prod {i=1}^{n} (1 + r{i}) \\right)^{\\frac {1}{n}} - 1\n",
    "$$\n",
    "\n",
    "带入我们的两个时期：\n",
    "\n",
    "$$\n",
    "r_{\\text{GeomMean}} = \\left( (1 + 0.2) \\cdot (1 - 0.18) \\right)^{\\frac{1}{2}} - 1\n",
    "$$\n",
    "\n",
    "$$\n",
    "= \\sqrt{1.2 \\cdot 0.82} - 1\n",
    "$$\n",
    "\n",
    "$$\n",
    "= \\sqrt{0.984} - 1 \\approx 0.992 - 1 = -0.008\n",
    "$$\n",
    "\n",
    "真实的几何平均收益率是 -0.8%\n",
    "\n",
    "⸻\n",
    "\n",
    "🔁 验证几何平均数的效果\n",
    "\n",
    "我们反推回去：\n",
    "\n",
    "$$\n",
    "100 \\cdot (1 - 0.008)^2 = 100 \\cdot 0.992 \\cdot 0.992 \\approx 98.4\n",
    "$$\n",
    "\n",
    "这才是你真实的资产值。\n",
    "\n",
    "⸻\n",
    "\n",
    "🧠 总结\n",
    "\n",
    "算术平均收益率不会考虑“亏的时候亏得多”这种现实，\n",
    "几何平均收益率才是真正能反映“复利结果”的指标。\n",
    "\n",
    "⸻\n",
    "\n",
    "你现在可以把这段复制到 Jupyter 了，给它来个标题 ## 算术 vs 几何收益演示，再配个图表，金融小白也能装成数据投资大师。还需要我帮你画图验证一下吗？"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 14,
     "status": "ok",
     "timestamp": 1732130383165,
     "user": {
      "displayName": "Christos Koutkos",
      "userId": "05788829401179389824"
     },
     "user_tz": -120
    },
    "id": "IsemxFk-3Wnb",
    "outputId": "6f8d553e-259c-4219-b505-11e813a6c013"
   },
   "outputs": [],
   "source": [
    "percent_returns_tsla = asset_prices['TSLA'].loc[\"2020-06-01\":\"2020-09-30\"].pct_change().dropna() # Calculating daily percent returns\n",
    "geom_mean_tsla_1 = ((1 + percent_returns_tsla).prod() ** (1/len(percent_returns_tsla))) - 1 # Calculating geometric mean\n",
    "\n",
    "log_returns_tsla = np.log(asset_prices['TSLA'].loc[\"2020-06-01\":\"2020-09-30\"] / asset_prices['TSLA'].loc[\"2020-06-01\":\"2020-09-30\"].shift(1)).dropna() # Calculating daily log returns\n",
    "arithmetic_mean_tsla_1 = log_returns_tsla.mean() # Calculating arithmetic mean\n",
    "\n",
    "print(\"Logarithm of geometric Mean of TSLA + 1: \", np.log(geom_mean_tsla_1 + 1))\n",
    "print(\"Arithmetic Mean of TSLA: \", arithmetic_mean_tsla_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-Xyu6fUZru95"
   },
   "source": [
    "### **3.3 Choosing the Correct Mean for Percent Returns**\n",
    "\n",
    "When analyzing investment returns, it's essential to choose the ppropriate mean based on the context. The arithmetic mean is **the correct measure for calculating expected returns in statistical models and portfolio optimization**. It represents the average return per period without considering the compounding effect. This is crucial when forecasting future returns, calculating expected portfolio returns, and performing risk assessments, as it aligns with the linear properties required in these calculations.\n",
    "\n",
    "On the other hand, the geometric mean accurately reflects the average compounded growth rate over multiple periods. It accounts for the effects of compounding and is suitable for evaluating the historical performance of an investment over time. However, the geometric mean should not be used in place of the arithmetic mean when performing statistical analyses or modeling expected returns, as it does not provide an unbiased estimate of future performance.\n",
    "\n",
    "In summary, while the geometric mean is invaluable for understanding the actual growth of an investment due to compounding, the arithmetic mean remains the fundamental measure in statistical contexts and portfolio management when assessing expected returns and making investment decisions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "waYQvHP7N3VS"
   },
   "source": [
    "## **4. Annualizing Percent Returns**\n",
    "\n",
    "The above (trivial in many cases) examples were used to create the intuition that you will need to distinguish between annualizing logarithmic and percent returns. Annualizing returns is crucial since it allows us to compare investments over different time periods on a common annual basis. This process is essential for evaluating performance and comparing different assets.\n",
    "\n",
    "For percent returns, we use the geometric mean to account for compounding effects. The formula for annualizing daily percent returns is:\n",
    "\n",
    "$$\n",
    "R_{\\text{Annual}} = (1 + r_{\\text{GeomMean}})^N - 1\n",
    "$$\n",
    "\n",
    "Where:\n",
    "\n",
    "* $R_{\\text{Annual}}$ is the annualized return\n",
    "* $N$ is the number of trading periods in a year (it could be 252 days or 12 months for stocks, or 365 days for continuously traded assets, etc.)\n",
    "\n",
    "## **5. Annualizing Logarithmic Returns**\n",
    "\n",
    "For logarithmic returns, the annualization process is simpler due to their additive property. The formula for annualizing daily log returns is:\n",
    "\n",
    "$$\n",
    "R_{\\text{Annual,Log}} = N \\cdot r_{\\text{ArithMean}}\n",
    "$$\n",
    "\n",
    "If we want to convert it back to the \"actual\" annual returns, then:\n",
    "\n",
    "$$\n",
    "R_{\\text{Annual}} = e^{N \\cdot r_{\\text{ArithMean}}} - 1\n",
    "$$\n",
    "\n",
    "Let's calculate the annual returns of MSFT."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 14,
     "status": "ok",
     "timestamp": 1732130383165,
     "user": {
      "displayName": "Christos Koutkos",
      "userId": "05788829401179389824"
     },
     "user_tz": -120
    },
    "id": "hRQtuRxMpRYg",
    "outputId": "ca274870-2605-47fc-ae9d-893b59f4f670"
   },
   "outputs": [],
   "source": [
    "geom_mean_msft = ((1 + pct_returns_msft).prod() ** (1/len(pct_returns_msft))) - 1 # Calculating geometric mean\n",
    "annual_pct_returns_msft = (1 + geom_mean_msft) ** 252 - 1 # Annualizing percent returns\n",
    "\n",
    "annual_log_returns_msft = log_returns_msft.mean() * 252 # Annualizing log returns\n",
    "\n",
    "print(\"Annualized pct returns of MSFT: \", annual_pct_returns_msft)\n",
    "print(\"Annualized log returns of MSFT: \", annual_log_returns_msft)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wrPqKRq4sUo3"
   },
   "source": [
    "**Exercise 9:**\n",
    "\n",
    "Calculate the annual returns for TSLA, both for percent and log returns."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "flNhlo1juP77"
   },
   "source": [
    "## **6. Portfolio Variance**\n",
    "\n",
    "### **6.1 Overview of Portfolio Variance**\n",
    "\n",
    "This was discussed at a high level during the Financial Markets course, but here, we will show how to calculate variance in Python with empirical data. While returns are important, investors are also concerned about risk or volatility.  \n",
    "\n",
    "But let's think for a moment how we could measure risk for a portfolio of $n$ assets. If we had one asset, then we could calculate the standard deviation of returns and this could give us an approximation of how the returns deviate from the mean return. Similarly, one can argue that we can calculate the portfolio returns and then the standard deviation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 11,
     "status": "ok",
     "timestamp": 1732130383166,
     "user": {
      "displayName": "Christos Koutkos",
      "userId": "05788829401179389824"
     },
     "user_tz": -120
    },
    "id": "n6LK2iCNAa0A",
    "outputId": "c5218af8-03e1-4ab4-c30b-cc27e5f0a1c5"
   },
   "outputs": [],
   "source": [
    "r_port.std() # Calculating standard deviation of portfolio returns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RLKLVG50AUVZ"
   },
   "source": [
    "In Financial Markets, we also expressed portfolio variance as:\n",
    "\n",
    "$$\n",
    "\\sigma^{2}_{p} = \\sum_{i=1}^{n} \\sum_{j=1}^{n} w_i w_j \\text{Cov}(r_i, r_j)\n",
    "$$\n",
    "\n",
    "Where:\n",
    "\n",
    "* $w_i$ = the portfolio weight of the $i$th asset  \n",
    "* $\\text{Cov}_{i,j}$ = the covariance of two assets, which can be expressed as $\\rho_{_{(i,j)}} \\sigma_i \\sigma_j$, where $\\rho_{_{(i,j)}}$ is the correlation coefficient between the two assets\n",
    "\n",
    "\n",
    "The formula below is equivalent to the one above, but it is given in matrix notation:\n",
    "\n",
    "$$\n",
    "\\sigma^{2}_{p} = \\mathbf{w}^{T} \\cdot \\Sigma \\cdot \\mathbf{w}\n",
    "$$\n",
    "\n",
    "Where $\\Sigma$ is the portfolio covariance matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 8,
     "status": "ok",
     "timestamp": 1732130383166,
     "user": {
      "displayName": "Christos Koutkos",
      "userId": "05788829401179389824"
     },
     "user_tz": -120
    },
    "id": "B-x4L1rQDN8e",
    "outputId": "5eedcc65-90de-46f1-b718-238df84af30b"
   },
   "outputs": [],
   "source": [
    "port_var = w.T @ r.cov() @ w # Calculating portfolio variance\n",
    "port_std = np.sqrt(port_var) # Calculating portfolio standard deviation\n",
    "\n",
    "print(\"Portfolio variance: \", port_var)\n",
    "print(\"Portfolio standard deviation: \", port_std)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EM7c8cKDhUH8"
   },
   "source": [
    "In the above cell, we have showcased that the intuitive and straightforward way of calculating portfolio variance (by computing std directly on the portfolio value) can be replicated by using the covariance matrix and the weights. What we have essentially done is decompose the portfolio variance into several components:\n",
    "* The weights\n",
    "* The individual variances\n",
    "* The between pairs covariances\n",
    "\n",
    "The above result is somewhat anticipated. If the variance of an asset suddenly changes, the portfolio variance should change. If the weight of a high variance asset changes, then we expect that the portfolio variance will change accordingly. But what about covariances?\n",
    "\n",
    "In order to see more clearly, we will decompose the covariance matrix a bit more:\n",
    "\n",
    "$$\n",
    "\\Sigma = D \\cdot R \\cdot D\n",
    "$$\n",
    "\n",
    "where\n",
    "\n",
    "* D is a diagonal matrix with the standard deviations of each asset\n",
    "* R is the correlation matrix\n",
    "\n",
    "The last decomposition shows us that the portfolio variance depends on the pairwise (Pearson) correlations as well.\n",
    "\n",
    "### **6.2 Impact of Correlation on Portfolio Variance**\n",
    "\n",
    "Let's write the portfolio variance in its quadratic form but incorporating correlations instead of covariances:\n",
    "\n",
    "$$\n",
    "\\sigma_p^2 = \\sum_{i=1}^{n} w_i^2 \\sigma_i^2 + \\sum_{i=1}^{n}\\sum_{j \\neq i}^{n} w_i w_j \\sigma_{ij}\n",
    "$$\n",
    "\n",
    "By substituting $\\sigma_{ij} = \\rho_{ij} \\sigma_i \\sigma_j$, we have:\n",
    "\n",
    "$$\n",
    "\\sigma_p^2 = \\sum_{i=1}^{n} w_i^2 \\sigma_i^2 + \\sum_{i=1}^{n}\\sum_{j \\neq i}^{n} w_i w_j \\rho_{ij} \\sigma_i \\sigma_j\n",
    "$$\n",
    "\n",
    "\n",
    "To understand how the portfolio variance changes with respect to the correlation $\\rho_{ij}$, we will take the partial derivative of $\\sigma_p^2$ with respect to $\\rho_{ij}$:\n",
    "\n",
    "$$\n",
    "\\frac{\\partial \\sigma_p^2}{\\partial \\rho_{ij}} = \\frac{\\partial}{\\partial \\rho_{ij}} \\left( \\sum_{i=1}^{n} w_i^2 \\sigma_i^2 + \\sum_{i=1}^{n}\\sum_{j \\neq i}^{n} w_i w_j \\rho_{ij} \\sigma_i \\sigma_j \\right)\n",
    "$$\n",
    "\n",
    "The first sum is independent of $\\rho_{ij}$, so its derivative with respect to $\\rho_{ij}$ is zero. The derivative of the second sum, with respect to $\\rho_{ij}$, gives:\n",
    "\n",
    "$$\n",
    "\\frac{\\partial \\sigma_p^2}{\\partial \\rho_{ij}} = w_i w_j \\sigma_i \\sigma_j\n",
    "$$\n",
    "\n",
    "We have already assumed that $w_{i} > 0$ and we know that standard deviations are always positive. That means that:\n",
    "\n",
    "$$\n",
    "\\frac{\\partial \\sigma_p^2}{\\partial \\rho_{ij}} > 0\n",
    "$$\n",
    "\n",
    "Keeping all else the same, if the correlations between two assets increases/decreases, the portfolio variance will increase/decrease. Subsequently, if the correlations of many assets increase at the same time, the portfolio variance will increase faster, and that could be an indication of systemic risk.\n",
    "\n",
    "Let's showcase some of the above facts with real-world data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 395
    },
    "executionInfo": {
     "elapsed": 1942,
     "status": "ok",
     "timestamp": 1732130385102,
     "user": {
      "displayName": "Christos Koutkos",
      "userId": "05788829401179389824"
     },
     "user_tz": -120
    },
    "id": "rMnRGZ8z6-CL",
    "outputId": "ce1abdae-be02-45bb-8f99-2c0bbc36d967"
   },
   "outputs": [],
   "source": [
    "# Figure 2\n",
    "# We will visualize the asset's std and returns vs portfolio\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (14,4))\n",
    "\n",
    "ax1.bar(x = r.columns, height = r.std(), alpha = 0.7)\n",
    "ax1.hlines(y = port_std, xmin = -0.4, xmax = 4.4, linestyle = \"--\", color = 'red', alpha = 0.8, label = \"Portfolio Std\")\n",
    "ax1.set_title(\"Assets vs Portfolio Volatlity\")\n",
    "ax1.set_ylabel(\"Volatility\")\n",
    "ax1.legend()\n",
    "\n",
    "ax2.bar(x = r.columns, height = (r + 1).prod() - 1, alpha = 0.7) # Make sure you can explain why the `(r + 1).prod() - 1` is the total return\n",
    "ax2.hlines(y = (r_port + 1).prod() - 1, xmin = -0.4, xmax = 4.4, linestyle = \"--\", color = 'red', alpha = 0.8, label = \"Portfolio Total Returns\")\n",
    "ax2.set_title(\"Assets vs Portfolio Total Returns\")\n",
    "ax2.set_ylabel(\"Total Returns (* 100%)\")\n",
    "ax2.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zNpqJ6AKV9QF"
   },
   "source": [
    "In Figure 2, the weights we selected (randomly) gave us a portfolio whose volatility is close to that of the majority of the assets, but its returns are well above.\n",
    "\n",
    "Let's test the relationship of the portfolio variance with the one of a random asset, for example MSFT."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 496
    },
    "executionInfo": {
     "elapsed": 3758,
     "status": "ok",
     "timestamp": 1732130388856,
     "user": {
      "displayName": "Christos Koutkos",
      "userId": "05788829401179389824"
     },
     "user_tz": -120
    },
    "id": "JhCfy70Seotm",
    "outputId": "aa2e8d66-9961-4c33-aeb2-05cdd9b7babc"
   },
   "outputs": [],
   "source": [
    "# Figure 3\n",
    "multipliers = np.linspace(0.1,5,100) # Creating an array that will use to multiply the MSFT returns array.\n",
    "portfolio_variances = []\n",
    "msft_variances = []\n",
    "\n",
    "for multiplier in multipliers:\n",
    "  temp_returns = r * np.array([1, 1, 1, multiplier, 1]) # Multiplying MSFT returns with a number in order to scale the returns linearly, changing thus the MSFT variance.\n",
    "  temp_port_variance = w.T @ temp_returns.cov() @ w # Calculating portfolio variance\n",
    "  msft_variances.append((temp_returns['MSFT'] * multiplier).var())\n",
    "  portfolio_variances.append(temp_port_variance)\n",
    "  assert np.allclose(r.corr(), temp_returns.corr()) # For every new array of returns where MSFT returns are multiplied with a number, the correlations remain the same\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (16,5))\n",
    "\n",
    "ax1.plot(multipliers, portfolio_variances)\n",
    "ax1.scatter(1, port_var, color = 'red', label = \"Initial Portfolio Variance (non scaled MSFT returns)\")\n",
    "ax1.set_title(\"Portfolio Variance as MSFT variance is increasing\")\n",
    "ax1.set_xlabel(\"Multiplier\")\n",
    "ax1.set_ylabel(\"Variance\")\n",
    "ax1.legend()\n",
    "\n",
    "ax2.plot(multipliers[10:30], portfolio_variances[10:30])\n",
    "ax2.scatter(1, port_var, color = 'red', label = \"Initial Portfolio Variance (non scaled MSFT returns)\")\n",
    "ax2.plot(multipliers[10:30], msft_variances[10:30], color = 'purple', label = \"MSFT Variance (non scaled MSFT returns)\")\n",
    "ax2.set_title(\"Portfolio Variance vs MSFT variance\")\n",
    "ax2.set_xlabel(\"Multiplier\")\n",
    "ax2.set_ylabel(\"Variance\")\n",
    "ax2.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "V7FzqxS2iBW4"
   },
   "source": [
    "Figure 3 illustrates the effects of the increase of the variance of one asset (MSFT in our case) on the variance of the portfolio. As we expect, the relationship of the portfolio variance and the variance of any asset is quadratic (left graph). The right graph illustrates the difference in risk of holding only one asset vs. a portfolio.\n",
    "\n",
    "Let's now do the same but for correlations. For simplicity reasons, we will not simulate correlated assets (as you have already seen in Module 2 by using the Cholesky Decomposition), but we will merely create synthetic correlation matrices to show the effects of changing correlations in the portfolio variance.\n",
    "\n",
    "In the next example, we keep variances and weights constant. We assume 100 assets for which we construct 18 correlation matrices. The 1st corr matrix is allowed to take values from -1 to 1. For each subsequent corr matrix, the low boundary changes as follows $-1 + 0.1 \\cdot j$. That means that the 2nd corr matrix will have correlations from -0.9 to 1 and the 18th corr matrix from 0.8 to 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 534
    },
    "executionInfo": {
     "elapsed": 892,
     "status": "ok",
     "timestamp": 1732130389746,
     "user": {
      "displayName": "Christos Koutkos",
      "userId": "05788829401179389824"
     },
     "user_tz": -120
    },
    "id": "Ik5BizOqhbtK",
    "outputId": "5cee54b8-5538-44ec-b3b6-dc8cd6f13398"
   },
   "outputs": [],
   "source": [
    "n_assets = 100\n",
    "\n",
    "w = np.random.dirichlet(np.ones(n_assets), size=1)[0] # Simulate weights using Dirichlet distribution\n",
    "\n",
    "degrees_of_freedom = 8  # Adjust the skewness of the Chi-square distribution\n",
    "variances = np.random.chisquare(df=degrees_of_freedom, size=n_assets)\n",
    "variances = variances / np.max(variances) * 0.003  # Scale to max variance of 0.003\n",
    "std_devs = np.sqrt(variances)\n",
    "D = np.diag(std_devs)\n",
    "\n",
    "# Construct the correlation matrices\n",
    "corr_matrices = []\n",
    "for j in range(19):\n",
    "  R = np.zeros((n_assets, n_assets))\n",
    "  low_boundary = -1 + j*0.1\n",
    "  for i in range(1, n_assets):\n",
    "      R[i, :i] = np.random.uniform(low_boundary, 1, i) # Creating the lower triangular part of the correlation matrix\n",
    "\n",
    "  R = R + R.T # Comment this line yourself\n",
    "  np.fill_diagonal(R, 1)\n",
    "  corr_matrices.append(R)\n",
    "\n",
    "# Calculate portfolio variances\n",
    "portfolio_variances = []\n",
    "for R in corr_matrices:\n",
    "  portfolio_variance = w.T @ D @ R @ D @ w\n",
    "  portfolio_variances.append(portfolio_variance)\n",
    "\n",
    "# Plot portfolio variance against correlations\n",
    "x_labels = [str((round(-1 + j*0.1, 1), 1)) for j in range(19)]\n",
    "plt.figure(figsize = (10,5))\n",
    "plt.plot(portfolio_variances)\n",
    "plt.title(\"Portfolio Variance vs Correlation\")\n",
    "plt.xlabel(\"Correlation Interval\")\n",
    "plt.ylabel(\"Variance\")\n",
    "plt.xticks(ticks = range(19), labels = x_labels, rotation = 45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "yTvgk5xqGbe0"
   },
   "source": [
    "Students who do not have a finance background may not have expected that result. Even when the individual variances and the weights remain constant, changes in correlations affect the portfolio variance. Specifically in our example, the portfolio variance is the lowest when the correlations were sampled from `uniform` distribution and interval $[-1,1]$. As the assets became more correlated, the variance went up as well.\n",
    "\n",
    "**Exercise 10:**\n",
    "\n",
    "Select $n \\geq 2$ stocks/bonds and construct a portfolio (select appropriate weights) using historical data such that the portfolio variance is $0$ (or really close to $0$ in order to be considered $0$) and the returns are positive (far from $0$). Present your findings in the forum. If you did not find one, present the reasons you could not find one."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "svvLY-cEMmzm"
   },
   "source": [
    "## **7. Portfolio Weights**\n",
    "\n",
    "Assume we can construct a portfolio that consists of stocks, bonds, and crypto. An investor might choose to hold a lot of bonds while another chooses mostly stocks and a third one loves crypto. The choice has to do with the risk profile of the investor; in other words, the choice of weights will satisfy the needs for specific returns given a risk tolerance (variance).\n",
    "\n",
    "From this perspective, the choice of weights is a subjective matter, and indeed in practice, investors behave very differently (Elton et al.). One of the best ways to explore this is by constructing the Efficient Frontier graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 628
    },
    "executionInfo": {
     "elapsed": 12624,
     "status": "ok",
     "timestamp": 1732130402363,
     "user": {
      "displayName": "Christos Koutkos",
      "userId": "05788829401179389824"
     },
     "user_tz": -120
    },
    "id": "mJrcBlag0F8Z",
    "outputId": "8f04334e-c3a2-4c6e-b739-26559d8e54e3"
   },
   "outputs": [],
   "source": [
    "from scipy.optimize import minimize\n",
    "\n",
    "weights = np.random.dirichlet(np.ones(5)*0.7, size = 20000) # Creating 20000 sets of weights using dirichlet distribution\n",
    "\n",
    "assert np.isclose(np.sum(weights, axis = 1), 1).all() # Check that each set of weights sum up to 1\n",
    "\n",
    "eff_front_dict = {}\n",
    "cov_matrix_ret = r.cov() * 252\n",
    "expected_returns = r.mean() * 252\n",
    "\n",
    "# Filling the eff_front_dict\n",
    "for w in weights:\n",
    "  port_ret = expected_returns @ w.T # Annualized percent returns as expected returns\n",
    "  port_std = np.sqrt(w.T @ cov_matrix_ret @ w)\n",
    "  eff_front_dict[str(list(w))] = [port_ret, port_std]\n",
    "\n",
    "eff_frontier_dataframe = pd.DataFrame(eff_front_dict, index = ['Returns', 'Standard Deviation']).T # Storing everything in one dataframe\n",
    "\n",
    "def get_portfolio_stats(weights, expected_returns, cov_matrix):\n",
    "    port_ret = expected_returns @ weights\n",
    "    port_std = np.sqrt(weights.T @ cov_matrix @ weights)\n",
    "    return port_ret, port_std\n",
    "\n",
    "def negative_sharpe_ratio(weights, expected_returns, cov_matrix, risk_free_rate=0.02):\n",
    "    port_ret, port_std = get_portfolio_stats(weights, expected_returns, cov_matrix)\n",
    "    sharpe_ratio = (port_ret - risk_free_rate) / port_std\n",
    "    return -sharpe_ratio\n",
    "\n",
    "def minimum_variance(weights, expected_returns, cov_matrix):\n",
    "    return get_portfolio_stats(weights, expected_returns, cov_matrix)[1]\n",
    "\n",
    "def efficient_frontier_point(expected_returns, cov_matrix, target_return):\n",
    "    n_assets = len(expected_returns)\n",
    "    args = (expected_returns, cov_matrix)\n",
    "    constraints = (\n",
    "        {'type': 'eq', 'fun': lambda w: np.sum(w) - 1},\n",
    "        {'type': 'eq', 'fun': lambda w: get_portfolio_stats(w, expected_returns, cov_matrix)[0] - target_return}\n",
    "    )\n",
    "    bounds = tuple((0, 1) for _ in range(n_assets))\n",
    "\n",
    "    result = minimize(\n",
    "        minimum_variance,\n",
    "        x0=np.ones(n_assets) / n_assets,\n",
    "        args=args,\n",
    "        method='SLSQP',\n",
    "        bounds=bounds,\n",
    "        constraints=constraints\n",
    "    )\n",
    "\n",
    "    return result.x\n",
    "\n",
    "def get_efficient_frontier(expected_returns, cov_matrix, n_points=100):\n",
    "    # Find the minimum variance portfolio\n",
    "    n_assets = len(expected_returns)\n",
    "    args = (expected_returns, cov_matrix)\n",
    "    constraints = ({'type': 'eq', 'fun': lambda w: np.sum(w) - 1})\n",
    "    bounds = tuple((0, 1) for _ in range(n_assets))\n",
    "\n",
    "    min_var_result = minimize(\n",
    "        minimum_variance,\n",
    "        x0=np.ones(n_assets) / n_assets,\n",
    "        args=args,\n",
    "        method='SLSQP',\n",
    "        bounds=bounds,\n",
    "        constraints=constraints\n",
    "    )\n",
    "    min_ret, min_std = get_portfolio_stats(min_var_result.x, expected_returns, cov_matrix)\n",
    "\n",
    "    # Find the maximum return portfolio\n",
    "    max_ret_idx = np.argmax(expected_returns)\n",
    "    max_ret = expected_returns[max_ret_idx]\n",
    "\n",
    "    # Generate points on the efficient frontier\n",
    "    target_returns = np.linspace(min_ret, max_ret, n_points)\n",
    "    efficient_portfolios = []\n",
    "\n",
    "    for target_return in target_returns:\n",
    "        weights = efficient_frontier_point(expected_returns, cov_matrix, target_return)\n",
    "        ret, std = get_portfolio_stats(weights, expected_returns, cov_matrix)\n",
    "        efficient_portfolios.append([std, ret])\n",
    "\n",
    "    return np.array(efficient_portfolios)\n",
    "\n",
    "# Calculate the efficient frontier points\n",
    "efficient_points = get_efficient_frontier(expected_returns, cov_matrix_ret)\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.scatter(x=eff_frontier_dataframe['Standard Deviation'],\n",
    "           y=eff_frontier_dataframe['Returns'],\n",
    "           alpha=0.4)\n",
    "plt.scatter(x=r.std() * np.sqrt(252),\n",
    "           y=expected_returns,\n",
    "           color='red',\n",
    "           label=\"Individual Assets\",\n",
    "           alpha=0.7)\n",
    "plt.plot(efficient_points[:,0],\n",
    "         efficient_points[:,1],\n",
    "         'orange',\n",
    "         linewidth=3,\n",
    "         label='Efficient Frontier',\n",
    "         alpha=0.6)\n",
    "plt.title(\"Efficient Frontier\")\n",
    "plt.xlabel(\"Annual Portfolio Standard Deviation\")\n",
    "plt.ylabel(\"Annual Portfolio Returns\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "oKE3OvSkJAi7"
   },
   "source": [
    "Let's read the above illustration, which admittedly is one of the most important in portfolio management.\n",
    "\n",
    "First of all, we need to observe the shape of the frontier: the curve-like line that spans the left and upper part of the scatter plot represents all possible optimal portfolios that offer the highest expected return for a given level of risk (or the lowest risk for a given level of expected return). This curve is called the **efficient frontier**.\n",
    "\n",
    "Secondly, if we were to draw vertical lines on this graph, each line would intersect the frontier at a point representing the portfolio with the highest return for that specific level of risk. At the same time, there are plenty of weights that expose the portfolio to the same level of risk but for less return. That should bring our attention to the fact that even though the weights are subjective, if the portfolio that an investor chose does not lie in the efficient frontier, then the investor can do better in terms of returns by following the vertical line upwards until reaching the efficient frontier. In short, for any given level of risk (variance), there is an optimal portfolio composition that maximizes returns.\n",
    "\n",
    "The same as above is true if we were to draw horizontal lines. In this case, we can claim that for any given level of returns, we can minimize risk by following the horizontal line to the left up until it crosses the efficient frontier.\n",
    "\n",
    "As we move up and to the right along the frontier, we see higher potential returns but also higher risk. This illustrates the fundamental principle that to achieve higher returns, one generally must accept higher risk. The concave shape of the frontier illustrates the benefits of diversification. Portfolios on the frontier are typically well diversified, offering better risk-return profiles than individual assets.\n",
    "\n",
    "**Exercise 11:**\n",
    "\n",
    "Create your own portfolio, one to your liking: choose one or more equities, ETFs, bonds, and crypto. Try to include assets that are not that correlated with the rest of the portfolio (if this is possible) and also include some very high-volatility assets (large marketcap altcoins or newly issued ones). Use the code provided above in order to construct the efficient frontier. Paste the graph in the forums along with a **small** paragraph that lists the assets chosen.\n",
    "\n",
    "**Exercise 12 (Optional):**\n",
    "\n",
    "In the first paragraph of this notebook, we mentioned that given $n$ vectors $r_{i}$, in the absence of multicollinearity, it is true that $\\text{dim}(\\text{span}(r_{i})) = n$. Otherwise, the dimension of the $\\text{span}$ will be lower than $n$. This is a known result from linear algebra. Use your favorite linear algebra textbook in order to remember what multicollinearity is and then argue why an investor would keep an asset in their portfolio when that asset could be written as a perfect linear combination of the rest of the portfolio assets. Should the investor just omit such an asset? What is its contribution to lowering portfolio variance or increasing returns? Does it give flexibility in portfolio management?\n",
    "\n",
    "**Exercise 13:**\n",
    "\n",
    "Throughout this lesson, students were introduced to the correct usage of the arithmetic and geometric mean. In Section *2.4 Annualizing Returns*, we explained how to annualize the percent and log returns if the compounding effect was needed. Still, when constructing the efficient frontier, we did this: `expected_returns = r.mean() * 252`. Why? In your answer, consider the context of portfolio optimization and whether we are focusing on modeling expected returns for statistical purposes or calculating the actual historical growth of an investment due to compounding. Discuss the implications of using the arithmetic mean in this context."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PRo2wFOGtwFg"
   },
   "source": [
    "## **8. Conclusion**\n",
    "\n",
    "In this lesson, we learned that logarithmic returns are additive and useful for longer-term analysis, while percentage returns are more intuitive for short-term performance evaluation. We also discovered how to annualize returns, allowing for fair comparisons between investments with different time horizons.\n",
    "The lesson emphasized the importance of understanding portfolio variance and its components. We saw how individual asset variances, weights, and correlations all play crucial roles in determining overall portfolio risk. The efficient frontier concept illustrated the trade-off between risk and return, highlighting the benefits of diversification.\n",
    "\n",
    "Through practical examples and exercises using Python, we've gained hands-on experience in calculating and interpreting these metrics. This knowledge forms a crucial foundation for more advanced topics in portfolio management and financial analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rKKS0keOFrc1"
   },
   "source": [
    "\n",
    "**References**\n",
    "\n",
    "* Elton, Edwin J., et al. *Modern Portfolio Theory and Investment Analysis*. John Wiley & Sons, 2009.\n",
    "\n",
    "* Ruppert, David, and David S. Matteson. *Statistics and Data Analysis for Financial Engineering*. 2nd ed., Springer, 2011."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "id": "KvTOJQ-GFrc1"
   },
   "source": [
    "---\n",
    "Copyright 2024 WorldQuant University. This\n",
    "content is licensed solely for personal use. Redistribution or\n",
    "publication of this material is strictly prohibited.\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "PRo2wFOGtwFg"
   ],
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
